{"version":3,"sources":["../../../projects/ngx-table/src/lib/utils/hide.ts","../../../projects/ngx-table/src/lib/utils/min.ts","../../../projects/ngx-table/src/lib/utils/px.ts","../../../projects/ngx-table/src/lib/tools/data-table-resource.ts","../../../projects/ngx-table/src/lib/directives/column/column.directive.ts","../../../projects/ngx-table/src/lib/components/row/row.component.html","../../../projects/ngx-table/src/lib/components/row/row.component.ts","../../../projects/ngx-table/src/lib/types/default-translations.type.ts","../../../projects/ngx-table/src/lib/components/pagination/pagination.component.html","../../../projects/ngx-table/src/lib/components/pagination/pagination.component.ts","../../../projects/ngx-table/src/lib/components/table/table.component.html","../../../projects/ngx-table/src/lib/components/table/table.component.ts","../../../projects/ngx-table/src/lib/utils/drag.ts","../../../projects/ngx-table/src/lib/components/header/header.component.html","../../../projects/ngx-table/src/lib/components/header/header.component.ts","../../../projects/ngx-table/src/lib/ngx-table.module.ts"],"names":["isBlank","obj","HideDirective","_elementRef","renderer","this","_prevCondition","Object","defineProperty","prototype","newCondition","initDisplayStyle","setStyle","nativeElement","_displayStyle","undefined","displayStyle","style","display","i0","ɵɵdirectiveInject","ElementRef","Renderer2","selectors","inputs","hide","Directive","selector","Input","MinPipe","transform","value","args","Math","min","apply","pure","Pipe","name","PixelConverter","DataTableResource","items","query","params","filter","result","slice","sortBy","sort","a","b","localeCompare","sortAsc","reverse","offset","limit","length","Promise","resolve","reject","setTimeout","count","_this","DataTableColumnDirective","styleClassObject","sortable","resizable","visible","getCellColor","row","index","cellColors","item","ngOnInit","_initCellClass","styleClass","property","test","replace","_a","contentQueries","rf","ctx","dirIndex","header","width","cellTemplate","ContentChild","static","headerTemplate","i0.ɵɵelement","i0.ɵɵproperty","ɵɵpureFunction3","_c1$1","column_r2","ctx_r6","i0.ɵɵelementStart","i0.ɵɵtemplate","i0.ɵɵelementEnd","i0.ɵɵstyleProp","i0.ɵɵadvance","ctx_r11","i0.ɵɵattribute","ɵɵpureFunction2","_c2","ctx_r1","DataTableRowComponent","dataTable","elementRef","_listeners","selectedChange","EventEmitter","_selected","selected","emit","pagination","displayParams","getTooltip","rowTooltip","_this_1","rowClick","observers","push","listen","event","rowClicked","rowDoubleClick","rowDoubleClicked","ngOnDestroy","forEach","fn","forwardRef","DataTableComponent","outputs","attrs","decls","vars","consts","template","i0.ɵɵlistener","$event","stopPropagation","i0.ɵɵclassProp","selectOnRowClick","labels","expandRow","primaryColumn","displayIndex","selectRow","Component","templateUrl","styleUrls","Inject","Output","defaultTranslations","headerReload","headerColumnSelector","headerColumnSelectorAdded","headerColumnSelectorRemoved","indexColumn","selectColumn","selectAllRows","expandColumn","sortedAscending","sortedDescending","sortAscending","sortDescending","paginationLimit","paginationText","paginationTotalPages","firstPage","prevPage","pageNumberLabel","pageNumber","pageNumberNofM","nextPage","lastPage","loadingText","loadedText","i0.ɵɵtext","i0.ɵɵtextInterpolate","nextId","DataTablePaginationComponent","id","pageBack","pageInput","focus","pageForward","itemCount","pageFirst","pageLast","maxPage","ceil","page","validate","newValue","target","viewQuery","ɵɵrestoreView","_r3_1","ɵɵreference","i0.ɵɵtextInterpolate1","i0.ɵɵpropertyInterpolate","i0.ɵɵtextInterpolate2","ViewChild","limits","column_r7","ɵɵpureFunction1","_c1$2","_c2$1","ctx_r14","ctx_r10","i_r8","ctx_r28","index_r38","index_r44","ctx_r42","_items","title","showTitle","indexColumnHeader","multiSelect","substituteRows","expandableRows","autoReload","showReloading","pageLimits","reload","headerClick","cellClick","selectedRowsChange","visibleColumnsChange","_displayParams","subject","Subject","notifier","selectedRows","_selectAllCheckbox","_resizeInProgress","resizeLimit","_reloading","_sortAsc","_offset","_limit","_onReloadFinished","_itemCount","next","val","_sortBy","floor","asc","_initDefaultValues","_initDefaultClickEvents","_updateDisplayParams","indexOf","assign","reloadItems","notifier$","subscribe","_notify","subject$","pipe","debounceTime","indexColumnVisible","selectColumnVisible","expandColumnVisible","tableEvent","sortColumn","column","reloading","_getRemoteParameters","headerClicked","preventDefault","cellClicked","ascending","columns","toArray","getRowColor","rowColors","_onSelectAllChanged","rows","onRowSelectChanged","splice","selectedRow","row_","Array","from","resizeColumnStart","columnElement","startOffset","offsetWidth","pageX","move","up","startX","startY","pageY","x","y","moved","mouseMoveHandler","evt","dx","dy","document","addEventListener","mouseUpHandler","removeEventListener","drag","moveEvent","_isResizeInLimit","nextElementSibling","ngAfterContentInit","first","loading","reloadNotification","paginationNotification","col","find","sortNotification","unsubscribe","_r7_1","ɵɵnextContext","onChange","_r10_1","_r13_1","_r20_1","i0.ɵɵclassMap","selectAllCheckbox","wrapperClass","ContentChildren","ViewChildren","paginator","expandTemplate","noDataMessage","DataTableHeaderComponent","elemRef","columnSelectorOpen","onClickHandler","contains","onKeyUpHandler","keyCode","isChecked","checked","interpolateParams","column_name","parentElement","textContent","trim","columnSelectorNotification","hostBindings","ɵɵresolveDocument","HostListener","NgxTableModule","forRoot","ngModule","providers","CommonModule","FormsModule","declarations","imports","exports","NgModule","i3","NgIf","i2","CheckboxControlValueAccessor","NgControlStatus","NgModel","NgForOf","NgClass","NgTemplateOutlet"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Renderer2\n} from '@angular/core';\n\nfunction isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\n@Directive({\n  selector: '[hide]'\n})\nexport class HideDirective {\n\n  private _prevCondition = false;\n  private _displayStyle: string;\n\n  constructor(private _elementRef: ElementRef, private renderer: Renderer2) {\n  }\n\n  @Input()\n  set hide(newCondition: boolean) {\n    this.initDisplayStyle();\n\n    if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {\n      this._prevCondition = true;\n      this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {\n      this._prevCondition = false;\n      this.renderer.setStyle(this._elementRef.nativeElement, 'display', this._displayStyle);\n    }\n  }\n\n  private initDisplayStyle() {\n    if (this._displayStyle === undefined) {\n      const displayStyle = this._elementRef.nativeElement.style.display;\n      if (displayStyle !== 'none') {\n        this._displayStyle = displayStyle;\n      }\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n  name: 'min'\n})\nexport class MinPipe implements PipeTransform {\n  transform(value: number[], args: string[]): any {\n    return Math.min.apply(null, value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'px'\n})\nexport class PixelConverter implements PipeTransform {\n  transform(value: string | number, args: string[] = []): any {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n    if (typeof value === 'number') {\n      return value + 'px';\n    }\n  }\n}\n","import {DataTableParams} from '../types/data-table-params.type';\n\n\nexport class DataTableResource<T> {\n\n  constructor(private items: T[]) {\n  }\n\n  query(params: DataTableParams, filter?: (item: T, index: number, items: T[]) => boolean): Promise<T[]> {\n\n    let result: T[] = [];\n    if (filter) {\n      result = this.items.filter(filter);\n    } else {\n      result = this.items.slice(); // shallow copy to use for sorting instead of changing the original\n    }\n\n    if (params.sortBy) {\n      result.sort((a: DataTableParams, b: DataTableParams) => {\n        if (typeof a[params.sortBy] === 'string') {\n          return a[params.sortBy].localeCompare(b[params.sortBy]);\n        } else {\n          return a[params.sortBy] - b[params.sortBy];\n        }\n      });\n      if (params.sortAsc === false) {\n        result.reverse();\n      }\n    }\n    if (params.offset !== undefined) {\n      if (params.limit === undefined) {\n        result = result.slice(params.offset, result.length);\n      } else {\n        result = result.slice(params.offset, params.offset + params.limit);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(result));\n    });\n  }\n\n  count(): Promise<number> {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this.items.length));\n    });\n\n  }\n}\n","import {ContentChild, Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {DataTableRowComponent} from '../../components/row/row.component';\nimport {CellCallback} from '../../types/cell-callback.type';\n\n\n@Directive({\n  selector: 'data-table-column'\n})\nexport class DataTableColumnDirective implements OnInit {\n\n  private styleClassObject = {}; // for [ngClass]\n\n  // init:\n  @Input() header: string;\n  @Input() sortable = false;\n  @Input() resizable = false;\n  @Input() property: string;\n  @Input() styleClass: string;\n  @Input() cellColors: CellCallback;\n\n  // init and state:\n  @Input() width: number | string;\n  @Input() visible = true;\n\n  @ContentChild('dataTableCell', { static: true }) cellTemplate: ElementRef;\n  @ContentChild('dataTableHeader', { static: true }) headerTemplate: ElementRef;\n\n  getCellColor(row: DataTableRowComponent, index: number) {\n    if (this.cellColors !== undefined) {\n      return (<CellCallback>this.cellColors)(row.item, row, this, index);\n    }\n  }\n\n  ngOnInit() {\n    this._initCellClass();\n  }\n\n  private _initCellClass() {\n    if (!this.styleClass && this.property) {\n      if (/^[a-zA-Z0-9_]+$/.test(this.property)) {\n        this.styleClass = 'column-' + this.property;\n      } else {\n        this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');\n      }\n    }\n\n    if (this.styleClass != null) {\n      this.styleClassObject = {\n        [this.styleClass]: true\n      };\n    }\n  }\n}\n","<tr class=\"data-table-row\"\n    [title]=\"getTooltip()\"\n    [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n    [class.row-odd]=\"index % 2 === 0\"\n    [class.row-even]=\"index % 2 === 1\"\n    [class.selected]=\"selected\"\n    [class.clickable]=\"dataTable.selectOnRowClick\">\n  <td [hide]=\"!dataTable.expandColumnVisible\">\n    <button (click)=\"expanded = !expanded; $event.stopPropagation()\" class=\"row-expand-button\"\n         [attr.aria-expanded]=\"expanded\"\n         [title]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\n         [attr.aria-label]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\">\n      <i [ngClass]=\"{'fa-caret-right': !expanded, 'fa-caret-down': expanded}\" class=\"fa fa-lg\" aria-hidden=\"true\"></i>\n    </button>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\" [textContent]=\"displayIndex\"></td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input\n           type=\"checkbox\" [(ngModel)]=\"selected\"\n           [title]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\n           [attr.aria-label]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"/>\n  </td>\n  <ng-template ngFor [ngForOf]=\"dataTable.columns\" let-column>\n    <th *ngIf=\"dataTable.primaryColumn === column.property\" scope=\"row\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n        class=\"data-column\"\n        [style.background-color]=\"column.getCellColor(_this, index)\">\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\n    </th>\n    <td *ngIf=\"dataTable.primaryColumn !== column.property\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n        class=\"data-column\"\n        [style.background-color]=\"column.getCellColor(_this, index)\">\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\n    </td>\n  </ng-template>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <div [ngTemplateOutlet]=\"dataTable.expandTemplate\" [ngTemplateOutletContext]=\"{row: _this, item: item}\"></div>\n  </td>\n</tr>\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport { DataTableComponent } from '../table/table.component';\n\n@Component({\n  selector: '[dataTableRow]',\n  templateUrl: './row.component.html',\n  styleUrls: ['./row.component.css']\n})\nexport class DataTableRowComponent implements OnInit, OnDestroy {\n\n  public _this = this;\n\n  @Input() item: any;\n  @Input() index: number;\n\n  expanded: boolean;\n\n  private _listeners = [];\n\n  // row selection:\n  private _selected: boolean;\n\n  @Output() selectedChange = new EventEmitter();\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected) {\n    this._selected = selected;\n    this.selectedChange.emit(selected);\n  }\n\n  // other:\n  get displayIndex() {\n    if (this.dataTable.pagination) {\n      return this.dataTable.displayParams.offset + this.index + 1;\n    } else {\n      return this.index + 1;\n    }\n  }\n\n  getTooltip() {\n    if (this.dataTable.rowTooltip) {\n      return this.dataTable.rowTooltip(this.item, this, this.index);\n    }\n    return '';\n  }\n\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent,\n              private renderer: Renderer2, private elementRef: ElementRef) {}\n\n  ngOnInit() {\n    if (this.dataTable.rowClick.observers.length > 0) {\n      this._listeners.push(\n        this.renderer.listen(this.elementRef.nativeElement, 'click',\n          (event) => this.dataTable.rowClicked(this, event))\n      );\n    }\n    if (this.dataTable.rowDoubleClick.observers.length > 0) {\n      this._listeners.push(\n        this.renderer.listen(this.elementRef.nativeElement, 'dblclick',\n          (event) => this.dataTable.rowDoubleClicked(this, event))\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.selected = false;\n    this._listeners.forEach(fn => fn());\n  }\n}\n","import { DataTableTranslations } from './data-table-translations.type';\n\nexport const defaultTranslations: DataTableTranslations = {\n  headerReload: 'reload {title} table',\n  headerColumnSelector: 'column selector - adds or removes columns from {title} table',\n  headerColumnSelectorAdded: '{column_name} added to {title} table',\n  headerColumnSelectorRemoved: '{column_name} removed from {title} table',\n  indexColumn: 'index',\n  selectColumn: 'select',\n  selectRow: 'select {cell_content}',\n  selectAllRows: 'select all rows',\n  expandColumn: 'expand',\n  expandRow: 'expand {cell_content}',\n  sortedAscending: '{title} table sorted by {header} ascending',\n  sortedDescending: '{title} table sorted by {header} descending',\n  sortAscending: 'activate to sort ascending',\n  sortDescending: 'activate to sort descending',\n  paginationLimit: 'Limit',\n  paginationText: 'Results: {from} to {to} of {total}',\n  paginationTotalPages: 'of',\n  firstPage: 'first page',\n  prevPage: 'previous page',\n  pageNumberLabel: 'Page',\n  pageNumber: 'page number',\n  pageNumberNofM: '({N} of {M})',\n  nextPage: 'next page',\n  lastPage: 'last page',\n  loadingText: '{title} table is loading',\n  loadedText: '{title} table loaded'\n};\n","<div class=\"row\">\n  <div class=\"pagination-range col\">\n    <span [textContent]=\"dataTable.labels.paginationText\n        .replace('{from}', this.Math.ceil(dataTable.itemCount / dataTable.limit) !== 0 ? dataTable.offset + 1 + '' : '0')\n        .replace('{to}', this.Math.min(dataTable.offset + dataTable.limit, dataTable.itemCount) + '')\n        .replace('{total}', dataTable.itemCount + '')\"></span>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"pagination-limit col-md-3\">\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\">\n        <label [attr.for]=\"id + '-page-limit'\" class=\"input-group-text\" [textContent]=\"dataTable.labels.paginationLimit\"></label>\n      </div>\n      <select [id]=\"id + '-page-limit'\" class=\"form-control\" [(ngModel)]=\"limit\" [disabled]=\"dataTable.itemCount === 0\">\n        <option *ngFor=\"let l of limits\" [value]=\"l\">{{ l }}</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"pagination-pages offset-md-3 col-md-6\">\n    <div class=\"pagination-page\">\n      <div class=\"input-group\">\n        <button [disabled]=\"dataTable.offset <= 0\"\n                (click)=\"pageFirst()\"\n                class=\"btn btn-default pagination-firstpage\"\n                [title]=\"dataTable.labels.firstPage\"\n                [attr.aria-controls]=\"dataTable.id\">\n          <i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\n          <span class=\"sr-only\">first page</span>\n        </button>\n        <button [disabled]=\"dataTable.offset <= 0\"\n                (click)=\"pageBack()\"\n                class=\"btn btn-default pagination-prevpage\"\n                [title]=\"dataTable.labels.prevPage\"\n                [attr.aria-controls]=\"dataTable.id\">\n          <i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\n          <span class=\"sr-only\">previous page</span>\n        </button>\n\n        <div class=\"input-group-prepend d-sm-block d-none\">\n          <label class=\"input-group-text\" [attr.for]=\"id + '-page-input'\">\n            {{ dataTable.labels.pageNumberLabel }}\n          </label>\n        </div>\n        <input #pageInput type=\"number\"\n               [id]=\"id + '-page-input'\"\n               class=\"form-control\" min=\"1\" step=\"1\" max=\"{{maxPage}}\"\n               [disabled]=\"dataTable.itemCount === 0\"\n               [ngModel]=\"page\"\n               (blur)=\"validate($event)\"\n               (keyup.enter)=\"validate($event)\"\n               (keyup.esc)=\"pageInput.value = page\"\n               [title]=\"dataTable.labels.pageNumber + ' ' +\n                    dataTable.labels.pageNumberNofM.replace('{N}', ''+page).replace('{M}', ''+maxPage)\"\n               [attr.aria-controls]=\"dataTable.id\"/>\n        <div class=\"input-group-append\">\n            <span class=\"input-group-text\">\n              {{ dataTable.labels.paginationTotalPages }}&nbsp;{{ dataTable.lastPage }}\n            </span>\n        </div>\n\n        <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\n                (click)=\"pageForward()\"\n                class=\"btn btn-default pagination-nextpage\"\n                [title]=\"dataTable.labels.nextPage\"\n                [attr.aria-controls]=\"dataTable.id\">\n          <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n          <span class=\"sr-only\">next page</span>\n        </button>\n        <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\n                (click)=\"pageLast()\"\n                class=\"btn btn-default pagination-lastpage\"\n                [title]=\"dataTable.labels.lastPage\"\n                [attr.aria-controls]=\"dataTable.id\">\n          <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\n          <span class=\"sr-only\">last page</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  ViewChild\n} from '@angular/core';\nimport { DataTableComponent} from '../table/table.component';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'data-table-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.css']\n})\nexport class DataTablePaginationComponent {\n\n  id = `pagination-${nextId++}`;\n\n  @ViewChild('pageInput', { static: true }) pageInput: ElementRef;\n\n  Math: any;\n\n  @Input() limits: number[];\n\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent) {\n    this.Math = Math;\n  }\n\n  pageBack() {\n    this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);\n    if (this.dataTable.offset <= 0) {\n      this.pageInput.nativeElement.focus();\n    }\n}\n  pageForward() {\n    this.dataTable.offset += this.dataTable.limit;\n    if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {\n      this.pageInput.nativeElement.focus();\n    }\n  }\n\n  pageFirst() {\n    this.dataTable.offset = 0;\n    this.pageInput.nativeElement.focus();\n  }\n\n  pageLast() {\n    this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;\n    if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {\n      this.pageInput.nativeElement.focus();\n    }\n  }\n\n  get maxPage() {\n    return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);\n  }\n\n  get limit() {\n    return this.dataTable.limit;\n  }\n\n  set limit(value) {\n    this.dataTable.limit = +value;\n    // returning back to the first page.\n    this.page = 1;\n  }\n\n  get page() {\n    return this.dataTable.page;\n  }\n\n  set page(value) {\n    this.dataTable.page = +value;\n  }\n\n  validate(event) {\n    const newValue = +event.target.value;\n    if (newValue !== this.page) {\n      this.page = (event.target.value > this.maxPage) ? this.maxPage : (newValue < 1 ) ? 1 : newValue;\n      event.target.value = this.page;\n    }\n  }\n}\n","<div class=\"data-table-wrapper\">\n  <span class=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"false\" aria-relevant=\"text\">\n    <span [textContent]=\"reloadNotification\"></span>\n    <span [textContent]=\"paginationNotification\"></span>\n    <span [textContent]=\"sortNotification\"></span>\n    <span [textContent]=\"columnSelectorNotification\"></span>\n  </span>\n\n  <data-table-header *ngIf=\"header\"></data-table-header>\n\n  <div class=\"data-table-box\" [class]=\"wrapperClass\">\n    <table class=\"table data-table\" [id]=\"id\" tabindex=\"-1\">\n      <caption class=\"sr-only\" [textContent]=\"title\"></caption>\n      <thead>\n      <tr>\n        <td [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\n        </td>\n        <th scope=\"col\" [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\n          <span [textContent]=\"indexColumnHeader\"></span>\n        </th>\n        <td [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\n          <label [for]=\"id + '-select-all-column'\" class=\"sr-only\">\n            {{ labels.selectAllRows }}\n          </label>\n          <input\n            [id]=\"id + '-select-all-column'\"\n            [hide]=\"!multiSelect\"\n                 type=\"checkbox\"\n                 [(ngModel)]=\"selectAllCheckbox\"\n                 [disabled]=\"itemCount === 0\"\n                 [title]=\"labels.selectAllRows\"/>\n        </td>\n        <th *ngFor=\"let column of columns, index as i\" #th\n            [hide]=\"!column.visible\"\n            [class.sortable]=\"column.sortable\"\n            [class.resizable]=\"column.resizable\"\n            scope=\"col\"\n            [attr.aria-sort]=\"column.sortable ? (column.property === sortBy ? (sortAsc ? 'ascending' : 'descending') : 'none') : null\"\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\" >\n          <button *ngIf=\"column.sortable\" (click)=\"headerClicked(column, $event)\"\n                  [attr.aria-controls]=\"column.sortable ? id : null\"\n                  [disabled]=\"itemCount === 0\"\n                  [attr.aria-labelledby]=\"'col-'+id+'-'+i\"\n                  [title]=\"!sortAsc ? labels.sortAscending : labels.sortDescending\">\n            <span *ngIf=\"!column.headerTemplate\" [id]=\"'col-'+id+'-'+i\"\n                  [textContent]=\"column.header\"></span>\n            <span *ngIf=\"column.headerTemplate\" [id]=\"'col-'+id+'-'+i\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n              <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\n                aria-hidden=\"true\"></i>\n              <i [hide]=\"column.property !== sortBy\" class=\"fa\"\n                [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\n            </span>\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n          </button>\n          <span *ngIf=\"!column.sortable\">\n            <span *ngIf=\"!column.headerTemplate\"\n                  [textContent]=\"column.header\"></span>\n            <span *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n               <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\n                  aria-hidden=\"true\"></i>\n               <i [hide]=\"column.property !== sortBy\" class=\"fa\"\n                  [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\n            </span>\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n          </span>\n        </th>\n      </tr>\n      </thead>\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\n      </tbody>\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\n        <tr>\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\n        </tr>\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\" role=\"presentation\">\n        <td [hide]=\"!expandColumnVisible\"></td>\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n        <td [hide]=\"!selectColumnVisible\"></td>\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"busy\" *ngIf=\"showReloading && reloading\">\n      <i><i class=\"fa fa-spin fa-cog fa-2x\"></i></i>\n    </div>\n  </div>\n\n  <data-table-pagination *ngIf=\"pagination\" [limits]=\"pageLimits\"></data-table-pagination>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef, ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { DataTableColumnDirective } from '../../directives/column/column.directive';\nimport { DataTableRowComponent } from '../row/row.component';\nimport { DataTableParams } from '../../types/data-table-params.type';\nimport { RowCallback } from '../../types/row-callback.type';\nimport { DataTableTranslations } from '../../types/data-table-translations.type';\nimport { defaultTranslations } from '../../types/default-translations.type';\nimport { drag } from '../../utils/drag';\n\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\n\nimport { debounceTime, tap } from 'rxjs/operators';\nimport { DataTablePaginationComponent } from \"../pagination/pagination.component\";\n\nlet nextId = 0;\n\n@Component({\n  selector: 'data-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class DataTableComponent implements DataTableParams, OnInit, AfterContentInit, OnDestroy {\n\n  private _items: any[] = [];\n  private _itemCount;\n\n  @Input() wrapperClass;\n\n  @Input()\n  get items(): any[] {\n    return this._items;\n  }\n\n  set items(items: any[]) {\n    this._items = items;\n    // no need to call notifier.next() because _onReloadFinished()\n    // will change reloaded value causing notifier.next() to be called implicitly.\n    this._onReloadFinished();\n  }\n\n\n  @Input()\n  get itemCount(): number {\n    return this._itemCount;\n  }\n\n  set itemCount(count: number) {\n    this._itemCount = count;\n    this.notifier.next();\n  }\n\n  // UI components:\n  @ContentChildren(DataTableColumnDirective) columns: QueryList<DataTableColumnDirective>;\n  @ViewChildren(DataTableRowComponent) rows: QueryList<DataTableRowComponent>;\n\n  @ViewChild(DataTablePaginationComponent, {static: false}) paginator;\n\n  @ContentChild('dataTableExpand', { static: true }) expandTemplate: TemplateRef<any>;\n\n  // One-time optional bindings with default values:\n  @Input() title = '';\n  @Input() showTitle = true;\n  @Input() header = true;\n  @Input() pagination = true;\n  @Input() indexColumn = true;\n  @Input() indexColumnHeader = '';\n  @Input() rowColors: RowCallback;\n  @Input() rowTooltip: RowCallback;\n  @Input() selectColumn = false;\n  @Input() multiSelect = true;\n  @Input() substituteRows = true;\n  @Input() expandableRows = false;\n  @Input() labels: DataTableTranslations;\n  @Input() selectOnRowClick = false;\n  @Input() autoReload = true;\n  @Input() showReloading = false;\n  @Input() noDataMessage: string;\n  @Input() pageLimits: number[] = [10, 25, 50, 100, 250];\n  @Input() primaryColumn = '';\n\n  // reload emitter\n  @Output() reload = new EventEmitter();\n\n  // event handlers:\n  @Output() rowClick = new EventEmitter();\n  @Output() rowDoubleClick = new EventEmitter();\n  @Output() headerClick = new EventEmitter();\n  @Output() cellClick = new EventEmitter();\n  @Output() selectedRowsChange = new EventEmitter();\n  @Output() visibleColumnsChange = new EventEmitter();\n  // UI state without input:\n  indexColumnVisible: boolean;\n  selectColumnVisible: boolean;\n  expandColumnVisible: boolean;\n\n  // ada notifications.\n  reloadNotification: string;\n  paginationNotification: string;\n  sortNotification: string;\n  columnSelectorNotification: string;\n\n  _displayParams = <DataTableParams>{}; // params of the last finished reload\n\n  subject = new Subject<void>();\n  subject$: Subscription;\n\n  notifier = new Subject<void>();\n  notifier$: Subscription;\n\n  // selection:\n  selectedRow: DataTableRowComponent;\n  selectedRows: DataTableRowComponent[] = [];\n\n  Math: any;\n  id = `datatable-${nextId++}`;\n\n  // select all checkbox flag\n  private _selectAllCheckbox = false;\n\n  // column resizing:\n  private _resizeInProgress = false;\n\n  resizeLimit = 30;\n\n  // Reloading:\n  _reloading = false;\n\n  get reloading() {\n    return this._reloading;\n  }\n\n  set reloading(val: boolean) {\n    this._reloading = val;\n    this.notifier.next();\n  }\n\n  // UI state: visible get/set for the outside with @Input for one-time initial values\n  private _sortBy: string;\n\n  @Input()\n  get sortBy(): string {\n    return this._sortBy;\n  }\n\n  set sortBy(value: string) {\n    this._sortBy = value;\n    this.subject.next();\n  }\n\n  private _sortAsc = true;\n\n  @Input()\n  get sortAsc(): boolean {\n    return this._sortAsc;\n  }\n\n  set sortAsc(value: boolean) {\n    this._sortAsc = value;\n    this.subject.next();\n  }\n\n  private _offset = 0;\n\n  @Input()\n  get offset(): number {\n    return this._offset;\n  }\n\n  set offset(value: number) {\n    this._offset = value;\n    this.subject.next();\n  }\n\n  private _limit = 10;\n\n  @Input()\n  get limit(): number {\n    return this._limit;\n  }\n\n  set limit(value: number) {\n    this._limit = value;\n    this.subject.next();\n  }\n\n  // calculated property:\n  @Input()\n  get page() {\n    return this.itemCount !== 0 ? Math.floor(this.offset / this.limit) + 1 : 0;\n  }\n\n  set page(value) {\n    this.offset = (value - 1) * this.limit;\n  }\n\n  get lastPage() {\n    return Math.ceil(this.itemCount / this.limit);\n  }\n\n  // setting multiple observable properties simultaneously\n  sort(sortBy: string, asc: boolean) {\n    this.sortBy = sortBy;\n    this.sortAsc = asc;\n  }\n\n  // init\n  ngOnInit() {\n    this._initDefaultValues();\n    this._initDefaultClickEvents();\n    this._updateDisplayParams();\n\n    if (this.pageLimits.indexOf(this.limit) < 0) {\n      this.limit = this.pageLimits[0];\n    }\n\n    this.labels = {...defaultTranslations, ...this.labels};\n\n    if (this.autoReload) {\n      this.reloadItems();\n    }\n\n    this.notifier$ = this.notifier.subscribe(() => this._notify());\n    this.subject$ = this.subject.pipe(debounceTime(100)).subscribe(() => this.reloadItems());\n\n  }\n\n  private _initDefaultValues() {\n    this.indexColumnVisible = this.indexColumn;\n    this.selectColumnVisible = this.selectColumn;\n    this.expandColumnVisible = this.expandableRows;\n  }\n\n  private _initDefaultClickEvents() {\n    this.headerClick.subscribe(\n      (tableEvent: { column: DataTableColumnDirective, event: Event }) => this.sortColumn(tableEvent.column));\n    if (this.selectOnRowClick) {\n      this.rowClick.subscribe(\n        (tableEvent: { row: DataTableRowComponent, event: Event }) => tableEvent.row.selected = !tableEvent.row.selected);\n    }\n  }\n\n  reloadItems() {\n    this.reloading = true;\n    this.reload.emit(this._getRemoteParameters());\n  }\n\n  private _onReloadFinished() {\n    if (this.reloading) {\n      this._updateDisplayParams();\n      this._selectAllCheckbox = false;\n      this.reloading = false;\n    }\n  }\n\n  get displayParams() {\n    return this._displayParams;\n  }\n\n  _updateDisplayParams() {\n    this._displayParams = {\n      sortBy: this.sortBy,\n      sortAsc: this.sortAsc,\n      offset: this.offset,\n      limit: this.limit\n    };\n  }\n\n  constructor() {\n  }\n\n  public rowClicked(row: DataTableRowComponent, event: Event) {\n    this.rowClick.emit({row, event});\n  }\n\n  public rowDoubleClicked(row: DataTableRowComponent, event: Event) {\n    this.rowDoubleClick.emit({row, event});\n  }\n\n  public headerClicked(column: DataTableColumnDirective, event: Event) {\n    if (!this._resizeInProgress) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.headerClick.emit({column, event});\n    } else {\n      this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end\n    }\n  }\n\n  private cellClicked(column: DataTableColumnDirective, row: DataTableRowComponent, event: MouseEvent) {\n    this.cellClick.emit({row, column, event});\n  }\n\n  // functions:\n  private _getRemoteParameters(): DataTableParams {\n    const params = <DataTableParams>{};\n\n    if (this.sortBy) {\n      params.sortBy = this.sortBy;\n      params.sortAsc = this.sortAsc;\n    }\n    if (this.pagination) {\n      params.offset = this.offset;\n      params.limit = this.limit;\n    }\n    return params;\n  }\n\n  private sortColumn(column: DataTableColumnDirective) {\n    if (column.sortable) {\n\n      const ascending = this.sortBy === column.property ? !this.sortAsc : true;\n\n      if(column.property === this.sortBy &&  ! this.sortAsc) {\n        this.sort(undefined, true);\n        return;\n      }\n\n      this.sort(column.property, ascending);\n    }\n  }\n\n  get columnCount() {\n    let count = 0;\n    count += this.indexColumnVisible ? 1 : 0;\n    count += this.selectColumnVisible ? 1 : 0;\n    count += this.expandColumnVisible ? 1 : 0;\n    this.columns.toArray().forEach(column => {\n      count += column.visible ? 1 : 0;\n    });\n    return count;\n  }\n\n  public getRowColor(item: any, index: number, row: DataTableRowComponent) {\n    if (this.rowColors !== undefined) {\n      return (<RowCallback>this.rowColors)(item, row, index);\n    }\n  }\n\n  get selectAllCheckbox() {\n    return this._selectAllCheckbox;\n  }\n\n  set selectAllCheckbox(value) {\n    this._selectAllCheckbox = value;\n    this._onSelectAllChanged(value);\n  }\n\n  private _onSelectAllChanged(value: boolean) {\n    this.rows.toArray().forEach(row => row.selected = value);\n    this.selectedRowsChange.emit(this.selectedRows);\n  }\n\n  onRowSelectChanged(row: DataTableRowComponent) {\n\n    // maintain the selectedRow(s) view\n    if (this.multiSelect) {\n      const index = this.selectedRows.indexOf(row);\n      if (row.selected && index < 0) {\n        this.selectedRows.push(row);\n      } else if (!row.selected && index >= 0) {\n        this.selectedRows.splice(index, 1);\n      }\n    } else {\n      if (row.selected) {\n        this.selectedRow = row;\n      } else if (this.selectedRow === row) {\n        delete this.selectedRow;\n      }\n    }\n\n    // unselect all other rows:\n    if (row.selected && !this.multiSelect) {\n      this.rows.toArray().filter(row_ => row_.selected).forEach(row_ => {\n        if (row_ !== row) { // avoid endless loop\n          row_.selected = false;\n        }\n      });\n    }\n\n    this.selectedRowsChange.emit(this.selectedRows);\n  }\n\n  // other:\n\n  get substituteItems() {\n    return Array.from({length: this.displayParams.limit - this.items.length});\n  }\n\n  public resizeColumnStart(event: MouseEvent, column: DataTableColumnDirective, columnElement: HTMLElement) {\n    this._resizeInProgress = true;\n    let startOffset = columnElement.offsetWidth - event.pageX;\n    drag(event, {\n      move: (moveEvent: MouseEvent, dx: number) => {\n        if (this._isResizeInLimit(columnElement, dx)) {\n          column.width = startOffset + moveEvent.pageX + dx;\n        }\n      },\n    });\n  }\n\n  private _isResizeInLimit(columnElement: HTMLElement, dx: number) {\n    /* This is needed because CSS min-width didn't work on table-layout: fixed.\n         Without the limits, resizing can make the next column disappear completely,\n         and even increase the table width. The current implementation suffers from the fact,\n         that offsetWidth sometimes contains out-of-date values. */\n    if ((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||\n      !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column\n      (dx >= 0 && ((<HTMLElement>columnElement.nextElementSibling).offsetWidth + dx) <= this.resizeLimit)) {\n      return false;\n    }\n    return true;\n  }\n\n  ngAfterContentInit(): void {\n    if (this.primaryColumn === '') {\n      this.primaryColumn = (this.columns.first as DataTableColumnDirective).property;\n    }\n  }\n\n  _notify(): void {\n    const loading = this.reloading;\n\n    this.reloadNotification = loading ?\n      this.labels.loadingText.replace('{title}', this.title) :\n      this.labels.loadedText.replace('{title}', this.title);\n\n    if (!loading) {\n      if (this.pagination) {\n        this.paginationNotification = this.labels.paginationText\n          .replace('{from}', '' + (Math.ceil(this.itemCount / this.limit) !== 0 ? this.offset + 1 : '0'))\n          .replace('{to}', '' + (Math.min(this.offset + this.limit, this.itemCount)))\n          .replace('{total}', '' + this.itemCount);\n      } else {\n        this.paginationNotification = '';\n      }\n      if (this.columns !== undefined && this.sortBy !== undefined) {\n        const col = this.columns.toArray().find(column => column.property === this.sortBy) as DataTableColumnDirective;\n        this.sortNotification = (this.sortAsc ? this.labels.sortedAscending : this.labels.sortedDescending)\n          .replace('{title}', this.title)\n          .replace('{header}', col.header);\n      } else {\n        this.sortNotification = '';\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subject$.unsubscribe();\n    this.notifier$.unsubscribe();\n  }\n}\n","export type MoveHandler = (event: MouseEvent, dx: number, dy: number, x: number, y: number) => void;\nexport type UpHandler = (event: MouseEvent, x: number, y: number, moved: boolean) => void;\n\n/*tslint:disable-next-line*/\nexport function drag(event: MouseEvent, {move: move, up: up}: { move: MoveHandler, up?: UpHandler }) {\n\n  const startX = event.pageX;\n  const startY = event.pageY;\n  let x = startX;\n  let y = startY;\n  let moved = false;\n\n  function mouseMoveHandler(evt: MouseEvent) {\n    const dx = evt.pageX - x;\n    const dy = evt.pageY - y;\n    x = evt.pageX;\n    y = evt.pageY;\n    if (dx || dy) {\n      moved = true;\n    }\n\n    move(evt, dx, dy, x, y);\n\n    event.preventDefault(); // to avoid text selection\n  }\n\n  function mouseUpHandler(evt: MouseEvent) {\n    x = evt.pageX;\n    y = evt.pageY;\n\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n\n    if (up) {\n      up(event, x, y, moved);\n    }\n  }\n\n  document.addEventListener('mousemove', mouseMoveHandler);\n  document.addEventListener('mouseup', mouseUpHandler);\n}\n","<div class=\"data-table-header\">\n  <p class=\"h4 title\" *ngIf=\"dataTable.showTitle\" [textContent]=\"dataTable.title\"></p>\n  <div class=\"button-panel\">\n    <button type=\"button\" class=\"btn btn-default btn-sm refresh-button\"\n            (click)=\"dataTable.reloadItems()\">\n      <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n      <span class=\"sr-only\">{{ dataTable.labels.headerReload.replace('{title}', dataTable.title) }}</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm column-selector-button\" [class.active]=\"columnSelectorOpen\"\n            [attr.aria-haspopup]=\"true\"\n            [attr.aria-expanded]=\"columnSelectorOpen\"\n            (click)=\"columnSelectorOpen = !columnSelectorOpen;\">\n      <i class=\"fa fa-list\" aria-hidden=\"true\"></i>\n      <span class=\"sr-only\">{{ dataTable.labels.headerColumnSelector.replace('{title}', dataTable.title) }}</span>\n    </button>\n    <div class=\"column-selector-wrapper\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box panel panel-default\">\n        <ul class=\"list-group list-group-flush\">\n          <li *ngIf=\"dataTable.expandableRows\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.expandColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.expandColumn\"></span>\n            </label>\n          </li>\n          <li *ngIf=\"dataTable.indexColumn\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.indexColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.indexColumn\"></span>\n            </label>\n          </li>\n          <li *ngIf=\"dataTable.selectColumn\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.selectColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.selectColumn\"></span>\n            </label>\n          </li>\n          <ng-template ngFor let-item let-i=\"index\" [ngForOf]=\"dataTable.columns\">\n            <li class=\"list-group-item column-selector-column checkbox\"\n                *ngIf=\"dataTable.primaryColumn !== item.property\">\n              <label class=\"d-flex align-items-center\">\n                <input type=\"checkbox\" [(ngModel)]=\"item.visible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n                <span [textContent]=\"item.header\"></span>\n              </label>\n            </li>\n          </ng-template>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  Inject\n} from '@angular/core';\nimport { DataTableComponent } from '../table/table.component';\n\n@Component({\n  selector: 'data-table-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class DataTableHeaderComponent {\n\n  columnSelectorOpen = false;\n\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent,\n              private elemRef: ElementRef) {\n  }\n\n  @HostListener('document:click', ['$event']) onClickHandler(event) {\n    if (!this.elemRef.nativeElement.contains(event.target)) {\n      this.columnSelectorOpen = false;\n    }\n  }\n\n  @HostListener('document:keyup', ['$event']) onKeyUpHandler(event) {\n    if (event.keyCode === 27 || (event.keyCode === 9 && !this.elemRef.nativeElement.contains(event.target))) {\n      this.columnSelectorOpen = false;\n    }\n  }\n\n  onChange(event: Event) {\n    const isChecked = (<HTMLInputElement> event.target).checked;\n    const columnName = (<HTMLInputElement> event.target).parentElement.textContent.trim();\n    const interpolateParams = {\n      'column_name': columnName,\n      'title': this.dataTable.title\n    };\n\n    this.dataTable.visibleColumnsChange.emit(event);\n\n    this.dataTable.columnSelectorNotification = (isChecked ? this.dataTable.labels.headerColumnSelectorAdded :\n      this.dataTable.labels.headerColumnSelectorRemoved)\n      .replace('{column_name}', interpolateParams.column_name)\n      .replace('{title}', interpolateParams.title);\n  }\n}\n","// modules\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\n// utils\nimport { HideDirective } from './utils/hide';\nimport { MinPipe } from './utils/min';\nimport { PixelConverter } from './utils/px';\n// types & tools\nimport { DataTableTranslations } from './types/data-table-translations.type';\nimport { CellCallback } from './types/cell-callback.type';\nimport { RowCallback } from './types/row-callback.type';\nimport { DataTableResource } from './tools/data-table-resource';\nimport { DataTableParams } from './types/data-table-params.type';\n// components & directives\nimport { DataTableComponent } from './components/table/table.component';\nimport { DataTableRowComponent } from './components/row/row.component';\nimport { DataTableColumnDirective } from './directives/column/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTablePaginationComponent } from './components/pagination/pagination.component';\n\nexport {\n  DataTableComponent, DataTableColumnDirective, DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,\n  DataTableResource,\n  DataTableParams, DataTableTranslations,\n  CellCallback, RowCallback\n};\n\n@NgModule({\n  declarations: [\n    DataTableComponent, DataTableColumnDirective,\n    DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,\n    PixelConverter, HideDirective, MinPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [DataTableComponent, DataTableColumnDirective]\n})\n\nexport class NgxTableModule {\n  public static forRoot(): ModuleWithProviders<NgxTableModule> {\n    return {\n      ngModule: NgxTableModule,\n      providers: []\n    };\n  }\n}\n\n\n"]}